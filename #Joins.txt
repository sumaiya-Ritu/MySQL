#Joins

#CROSSJOIN
    SELECT id FROM customers WHERE last_name = 'George';
    SELECT * FROM orders WHERE customer_id = 1;
     
     
    SELECT * FROM orders 
    WHERE customer_id = (SELECT id FROM customers WHERE last_name = 'George');
     
    -- To perform a (kind of useless) cross join:
    SELECT * FROM customers, orders;

#innerjoin
    -- Our first inner join!
    SELECT * FROM customers
    JOIN orders ON orders.customer_id = customers.id;
     
    SELECT first_name, last_name, order_date, amount FROM customers
    JOIN orders ON orders.customer_id = customers.id;
     
    -- The order doesn't matter here:
    SELECT * FROM orders
    JOIN customers ON customers.id = orders.customer_id;

#INNER JOIN WITH GROUPBY

    SELECT 
        first_name, last_name, SUM(amount) AS total
    FROM
        customers
            JOIN
        orders ON orders.customer_id = customers.id
    GROUP BY first_name , last_name
    ORDER BY total;

#LEFTJOIN

    SELECT 
        first_name, last_name, order_date, amount
    FROM
        customers
            LEFT JOIN
        orders ON orders.customer_id = customers.id;
     
     
    SELECT 
        order_date, amount, first_name, last_name
    FROM
        orders
            LEFT JOIN
        customers ON orders.customer_id = customers.id;

#LEFTJOIN WITH GROUP BY 

    SELECT 
        first_name, 
        last_name, 
        IFNULL(SUM(amount), 0) AS money_spent
    FROM
        customers
            LEFT JOIN
        orders ON customers.id = orders.customer_id
    GROUP BY first_name , last_name;

#RIGHTJOIN 

    SELECT 
        first_name, last_name, order_date, amount
    FROM
        customers
            RIGHT JOIN
        orders ON customers.id = orders.customer_id;

#ONDELETECASCADE

    CREATE TABLE customers (
        id INT PRIMARY KEY AUTO_INCREMENT,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        email VARCHAR(50)
    );
     
    CREATE TABLE orders (
        id INT PRIMARY KEY AUTO_INCREMENT,
        order_date DATE,
        amount DECIMAL(8 , 2 ),
        customer_id INT,
        FOREIGN KEY (customer_id)
            REFERENCES customers (id)
            ON DELETE CASCADE
    );






















